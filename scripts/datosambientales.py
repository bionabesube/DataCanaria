# -*- coding: utf-8 -*-
"""DatosAmbientales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CsBX3Dob9htNYy-6ZgtFRsVTKBRZ6738

# Configruaci칩n inicial de Google Colab
"""

# Instalaci칩n de librer칤as necesarias

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd
import rasterio
from rasterio.plot import show
import folium
import plotly.express as px
from datetime import datetime
import requests
import json

# Commented out IPython magic to ensure Python compatibility.
# %pip install rasterio

# Commented out IPython magic to ensure Python compatibility.
# Instalaci칩n e importaci칩n de librer칤as

# %pip install earthaccess
import earthaccess
from datetime import datetime
import os

# Autenticaci칩n con Earthdata Login
print("游댏 Iniciando sesi칩n en NASA Earthdata...")
auth = earthaccess.login(strategy="interactive")

# Coordenadas de la Costa de Canelones (치rea ampliada)
bbox_canelones = (-55.95, -34.81, -55.57, -34.5)  # :cite[3]:cite[9]

"""# Procesamiento de datasets"""

import xarray as xr
import pandas as pd
import matplotlib.pyplot as plt

# Load your downloaded NetCDF files
try:
    # Replace with your actual file names
    ds_temperature = xr.open_dataset("datos_canelones_temperatura.nc")
    ds_air_quality = xr.open_dataset("datos_canelones_calidad_aire.nc")

    print("=== Estructura de datos de temperatura ===")
    print(ds_temperature)

    print("\n=== Variables disponibles ===")
    print(list(ds_temperature.variables))

    print("\n=== Estructura de datos de calidad de aire ===")
    print(ds_air_quality)

except FileNotFoundError as e:
    print(f"Error: No se encontraron los archivos. Verifica los nombres: {e}")
except Exception as e:
    print(f"Error al cargar archivos: {e}")

"""# Modelado de **Datos**"""

# Datos MODIS NASA para temperatura superficial
def get_modis_temperature():
    """
    Obtener datos de temperatura MODIS de NASA Earthdata
    """
    # Coordenadas aproximadas de Costa de Canelones
    lat, lon = -34.81, -55.95

    # Aqu칤 integrar칤as con API de NASA Earthdata
    # Ejemplo de estructura para datos clim치ticos
    dates = pd.date_range('2023-01-01', '2024-01-01', freq='ME')
    temperature_data = {
        'date': dates,
        'temp_surface': np.random.normal(18, 5, len(dates)),  # Datos ejemplo
        'precipitation': np.random.gamma(2, 10, len(dates)),
        'humidity': np.random.uniform(60, 90, len(dates))
    }
    return pd.DataFrame(temperature_data)

# Datos clim치ticos hist칩ricos
climate_df = get_modis_temperature()
print(climate_df.head())

# Datos de calidad de aire - Sentinel-5P
def get_air_quality_data():
    """
    Obtener datos de calidad de aire de Sentinel-5P
    """
    # Par치metros de calidad de aire
    air_quality_params = ['NO2', 'CO', 'O3', 'AEROSOL_INDEX']

    # Simulaci칩n de datos (en pr치ctica usar칤as API de Copernicus)
    dates = pd.date_range('2023-01-01', '2024-01-01', freq='ME')
    air_data = {
        'date': dates,
        'NO2_ppb': np.random.uniform(5, 25, len(dates)),
        'CO_ppm': np.random.uniform(0.1, 0.8, len(dates)),
        'PM2.5': np.random.uniform(8, 35, len(dates)),
        'PM10': np.random.uniform(15, 45, len(dates))
    }
    return pd.DataFrame(air_data)

air_quality_df = get_air_quality_data()

# An치lisis de riesgo de inundaciones
def get_flood_risk_data():
    """
    Datos de elevaci칩n y riesgo de inundaci칩n
    Usando SRTM NASA y datos hidrogr치ficos
    """
    elevation_data = {
        'sector': ['Sector 1', 'Sector 2', 'Sector 3', 'Sector 4'],
        'elevation_m': [5.2, 3.8, 7.1, 2.9],
        'flood_risk': ['Bajo', 'Alto', 'Bajo', 'Muy Alto'],
        'distance_coast_km': [0.5, 0.2, 1.2, 0.1]
    }
    return pd.DataFrame(elevation_data)

flood_df = get_flood_risk_data()

# Modelo de consumo energ칠tico y emisiones
def create_energy_emissions_model():
    """
    Modelo de consumo energ칠tico residencial y emisiones
    """
    np.random.seed(42)
    n_houses = 100

    house_data = {
        'house_id': range(1, n_houses + 1),
        'area_m2': np.random.normal(120, 30, n_houses),
        'construction_year': np.random.randint(1970, 2023, n_houses),
        'energy_consumption_kwh': np.random.gamma(2, 150, n_houses),
        'heating_type': np.random.choice(['Electric', 'Gas', 'Wood', 'None'], n_houses),
        'income_level': np.random.choice(['Low', 'Medium', 'High'], n_houses)
    }

    df = pd.DataFrame(house_data)
    # Calcular emisiones estimadas
    df['co2_emissions_kg'] = df['energy_consumption_kwh'] * 0.5  # Factor de emisi칩n

    return df

energy_df = create_energy_emissions_model()

"""# Correlaciones"""

# An치lisis correlaciones
def integrated_analysis():
    # Combinar datos clim치ticos y de calidad de aire
    merged_data = pd.merge(
        climate_df,
        air_quality_df,
        on='date',
        how='inner'
    )

    # An치lisis de correlaci칩n
    correlation_matrix = merged_data[['temp_surface', 'precipitation', 'NO2_ppb', 'PM2.5']].corr()

    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
    plt.title('Correlaci칩n entre Variables Clim치ticas y Calidad del Aire')
    plt.show()

    return merged_data

integrated_df = integrated_analysis()

"""# Mapa y Analisis"""

# Mapa interactivo de riesgo
def create_risk_map():
    """Crear mapa interactivo de riesgos clim치ticos"""
    costa_canelones_coords = [-34.81, -55.95]

    m = folium.Map(
        location=costa_canelones_coords,
        zoom_start=12,
        tiles='OpenStreetMap'
    )

    # A침adir capas de riesgo
    for idx, row in flood_df.iterrows():
        folium.CircleMarker(
            location=[costa_canelones_coords[0] + np.random.uniform(-0.05, 0.05),
                     costa_canelones_coords[1] + np.random.uniform(-0.05, 0.05)],
            radius=row['elevation_m'] * 2,
            popup=f"{row['sector']} - Riesgo: {row['flood_risk']}",
            color='red' if row['flood_risk'] in ['Alto', 'Muy Alto'] else 'green',
            fill=True
        ).add_to(m)

    return m

risk_map = create_risk_map()
risk_map

# An치lisis de series temporales
def temporal_analysis():
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))

    # Temperatura
    axes[0,0].plot(integrated_df['date'], integrated_df['temp_surface'])
    axes[0,0].set_title('Temperatura Superficial')
    axes[0,0].set_ylabel('춿C')

    # Calidad del aire
    axes[0,1].plot(integrated_df['date'], integrated_df['NO2_ppb'])
    axes[0,1].set_title('Di칩xido de Nitr칩geno (NO2)')
    axes[0,1].set_ylabel('ppb')

    # Consumo energ칠tico vs emisiones
    axes[1,0].scatter(energy_df['energy_consumption_kwh'], energy_df['co2_emissions_kg'])
    axes[1,0].set_xlabel('Consumo Energ칠tico (kWh)')
    axes[1,0].set_ylabel('Emisiones CO2 (kg)')
    axes[1,0].set_title('Relaci칩n Consumo-Emisiones')

    # Distribuci칩n de riesgo
    risk_counts = flood_df['flood_risk'].value_counts()
    axes[1,1].pie(risk_counts.values, labels=risk_counts.index, autopct='%1.1f%%')
    axes[1,1].set_title('Distribuci칩n de Riesgo de Inundaci칩n')

    plt.tight_layout()
    plt.show()

temporal_analysis()